% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/load_data_packages.R
\name{load_data_packages}
\alias{load_data_packages}
\title{Read contents of data package(s) and return a tibble with dataframe for each data file.}
\usage{
load_data_packages(
  datastore_reference,
  path = here::here(),
  dataFormat = "*.csv",
  metadataFormat = "EML",
  simplify = TRUE
)
}
\arguments{
\item{path}{is the location of a folder, 'data' (created during `getDataPackages()`) which contains subdirectories where each subdirectory is the DataStore referenceId of the data package. Again, this file structure is all set up using `getDataPackages()`. Defaults to the current workign directory (which is the default location for `getDataPackages()`).}

\item{dataFormat}{is a character value indicating the format of the data set(s) within the data package. Currently the only supported option is: *.csv for comma separated value text files. Defaults to "csv".}

\item{metadataFormat}{is a character value indicating the format of the metadata file within the data package. Currently the only supported format is Ecological Metadata (EML) and the parameter defaults to EML.}

\item{simplify}{logical. Defaults to TRUE. If there is only a single data package loaded, the function will return a simple list of tibbles (where each tibble reflects a data file from within the data package). If set to FALSE, the function will return a list that contains a list of tibbles. This structure mirrors the object structure returned if multiple data packages are simultaneously loaded (a list of data packages with each data package containing a list of tibbles where each tibble corresponds to a data file in the given data package).}

\item{dataStoreReference}{is a list of 6-7 digit numbers corresponding to the DataStore reference ID of the datapackage(s) to load. Alternatively, you can set `dataStoreReference` to "loadAll", which will load all the data packages in your /data folder.}
}
\value{
a list of (of lists of) tibbles.
}
\description{
`load_data_packages()` finds all the specified data packages in a /data directory (generated via `getDataPackages()`) and returns a tibble of tibbles where each data package is a tibble and within that each data file is it's own tibble. `load_data_packages()` also utilizes the metadata (only EML is currently supported) to correctly assign attributes to each data column.
}
\details{
currently `load_data_packages()` only supports EML metadata and .csv files in a very specific file structure, which is most easily set up using `getDataPackages()`. Archived (.zip) files must be extractecd for `load_data_packages()` to work properly. Again, `getDataPackages()` will accomplish this for you. 
'
}
\examples{
\dontrun{
load_data_packages(2272461, data_format = "csv", metadata_format = "eml")
}

}
\keyword{private}
