% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/getDataPackage.R
\name{get_data_packages}
\alias{get_data_packages}
\title{Retrieve digital data package holding from DataStore.}
\usage{
get_data_packages(
  reference_id,
  secure = FALSE,
  path = here::here(),
  force = FALSE
)
}
\arguments{
\item{reference_id}{is a 6-7 digit number corresponding to the reference ID of the data package.}

\item{secure}{logical indicating whether the file should be acquired using data services available to NPS internal staff only. Defaults to FALSE for public data. TRUE indicates internal data and requires a VPN connection (unless you are in an NPS office).}

\item{path}{String. Indicates the location that the "data" directory and all subdirectories and files should be written to. Defaults to the working directory.}

\item{force}{Logical. Defaults to FALSE. In the FALSE condition, the user is prompted if a directory already exists and asked whether to overwrite it or not. The user is also given information about which files are being downloaded, extracted, deleted, and where they are being written to. It also provides information about what errors (if any) were encountered. A user may choose to set FORCE = TRUE, especially when generating scripts to minimize print statements to the console.  When force is set to TRUE, all existing files are automatically overwritten without prompting. Feedback about which files are being downloaded and where is not reported. Only critical errors that stop the function (such as failed API calls) generate warnings.}
}
\value{
String. The path (including the /data folder) where all data package sub-directories and data files are contained.
}
\description{
`get_data_packages()` creates a directory called "data" in the current working directory (unless it already exists). For each data package, it writes a new sub-directory of "data" named with the corresponding data package reference ID. All the data package files are then copied to that directory.
}
\examples{
\dontrun{
#get a public data package
get_data_packages(2272461, secure = FALSE)

#get a list of data packages, some public some restricted
get_data_packages(c(2272461, 1234567, 7654321), secure = TRUE)

#pass a list of data packages to retrieve to the function:
data_packages<-c(2272461, 1234567, 7654321)
get_data_packages(data_packages, secure = TRUE, path="../../my_custom_directory")

#get a data package and return the path the data package is saved to
pathToDataForPiping <- get_data_packages(2272461, secure = TRUE, force = FALSE)
}
}
